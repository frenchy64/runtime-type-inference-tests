[FIXED] Freezes in annotation gen.

# enlive

[FIXED] Freezes in annotation gen.

# data.int-map

Broken again :(

Fixed using new compiler.

- [FIXED] broken tests
  - cast errors between primitive and normal functions
    - FIXED: CTYP-316
  - StackOverflow errors
    - try futures?
    - FIXED: CTYP-320
  - map equivalence errors
    - FIXED: CTYP-319

- [TODO] generative tests??????

# data.json

- [FIXED?] *value-fn* uses pointer equality on functions,
  breaks after wrapping
  - manually fixed by introducing 
  - TODO: pull request to data.json

- only track up to 20 fn arity

- Freezes in annotations gen

- try implementing equals in the function to be
  "pointer equals" still to the original thing
  ; (= *value-fn* (f v))

# fs

[FIXED] - infinite annotation generation loop

# data.priority-map

- [FIXED] Wrapper equiv problem
  - fixed :)

## Annotations

- should emit deftype annotations

- Merge defalias's that are just `Long`
  - maybe inline these aliases

- pm-empty-keyfn
  - 1-arity calls 2-arity
  - should share aliases for first arg
    - they're identical anyway

- priority-map-keyfn
  - kw args, homogeneous
  - collapse?

- priority-map-by
  - 1 arg should collapse into kwargs

- MACRO annoation????
  - apply-keyfn


# data.xml

- good experience

## Annotations

- missing defrecord annotation
  - clojure.data.xml.node.Element

- clojure.data.xml.node/element
  - takes 1, 2, 3 or 3+ args.
    - not variable arity
    - but looks like one

- parse-str
  - actually kw-args


# How evaluate

## qualitative

Does it make sense??

1. Don't run, gen type, manual inspection
  - done on something small but real
  - star trek game?
2. Generate types, try type checking programs
  - record what changes needed to get it to
    type check 
  - (on a different program than 1.) 

3. Generate spec, insert the spec, run the test
   with the spec on, also generate tests
  - does spec ignore the input??
    or just generate tests
  - best situation:
    - spec all passes
    - then types check with minimal changes
  - Q: can we use spec's tests to improve
       types, iteratively?
       (could throw away exceptions, throw
        away bad input etc., different options
        here)
(optional)
4. Generate types, use gradual typing
